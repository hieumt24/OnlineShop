@using OnlineShop.Utils
@model IEnumerable<OnlineShop.Models.Db.Product>

@{
    ViewData["Title"] = "Products Management";
    var userName = User.Identity?.Name ?? "Anonymous";
}

<!-- Connection Status Indicator -->
<div id="connectionStatus" class="connection-status disconnected">
    <i class="fas fa-circle"></i> Disconnected
</div>

<!-- Real-time notifications -->
<div id="notificationContainer" class="notification-container"></div>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-header d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1><i class="fas fa-box"></i> Products Management</h1>
                    <p class="text-muted">Manage your product inventory in real-time</p>
                </div>
                <div class="d-flex align-items-center gap-3">
                    <span class="realtime-badge">
                        <i class="fas fa-broadcast-tower"></i> Real-time
                    </span>
                    <div class="stats-badge">
                        <i class="fas fa-users"></i> <span id="activeUsers">1</span> online
                    </div>
                    <a asp-action="Create" class="btn btn-primary">
                        <i class="fas fa-plus"></i> Create New Product
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Stats Row -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="stat-card bg-primary">
                <div class="stat-icon">
                    <i class="fas fa-box"></i>
                </div>
                <div class="stat-content">
                    <h3 id="totalProducts">@Model.Count()</h3>
                    <p>Total Products</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card bg-success">
                <div class="stat-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-content">
                    <h3 id="inStockProducts">@Model.Count(p => p.Qty > 0)</h3>
                    <p>In Stock</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card bg-warning">
                <div class="stat-icon">
                    <i class="fas fa-exclamation-triangle"></i>
                </div>
                <div class="stat-content">
                    <h3 id="lowStockProducts">@Model.Count(p => p.Qty > 0 && p.Qty <= 10)</h3>
                    <p>Low Stock</p>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="stat-card bg-danger">
                <div class="stat-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="stat-content">
                    <h3 id="outOfStockProducts">@Model.Count(p => p.Qty == 0)</h3>
                    <p>Out of Stock</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Products Table -->
    <div class="row">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="fas fa-table"></i> Products List</h5>
                    <div class="table-controls">
                        <button class="btn btn-sm btn-outline-secondary" id="refreshBtn">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <div class="dropdown d-inline-block ms-2">
                            <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                <i class="fas fa-filter"></i> Filter
                            </button>
                            <ul class="dropdown-menu">
                                <li><a class="dropdown-item" href="#" data-filter="all">All Products</a></li>
                                <li><a class="dropdown-item" href="#" data-filter="in-stock">In Stock</a></li>
                                <li><a class="dropdown-item" href="#" data-filter="low-stock">Low Stock</a></li>
                                <li><a class="dropdown-item" href="#" data-filter="out-of-stock">Out of Stock</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="productsTable">
                            <thead class="table-light">
                            <tr>
                                <th>
                                    <i class="fas fa-image"></i> Image
                                </th>
                                <th>
                                    <i class="fas fa-tag"></i> @Html.DisplayNameFor(model => model.Title)
                                </th>
                                <th>
                                    <i class="fas fa-dollar-sign"></i> @Html.DisplayNameFor(model => model.Price)
                                </th>
                                <th>
                                    <i class="fas fa-percent"></i> @Html.DisplayNameFor(model => model.Discount)
                                </th>
                                <th>
                                    <i class="fas fa-boxes"></i> @Html.DisplayNameFor(model => model.Qty)
                                </th>
                                <th>
                                    <i class="fas fa-tags"></i> @Html.DisplayNameFor(model => model.Tags)
                                </th>
                                <th>
                                    <i class="fas fa-cogs"></i> Actions
                                </th>
                            </tr>
                            </thead>
                            <tbody id="productsTableBody">
                            @foreach (var item in Model) {
                                <tr data-product-id="@item.Id" class="product-row">
                                    <td>
                                        <div class="product-image">
                                            @if (!string.IsNullOrEmpty(item.ImageName))
                                            {
                                                <img src="/images/banners/@item.ImageName" alt="@item.Title" class="product-thumbnail" />
                                            }
                                            else
                                            {
                                                <div class="no-image">
                                                    <i class="fas fa-image"></i>
                                                </div>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <div class="product-title">
                                            <strong>@item.Title</strong>
                                            @if (!string.IsNullOrEmpty(item.Description))
                                            {
                                                <small class="text-muted d-block">@item.Description</small>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <span class="price">@CurrencyConverter.FormatToVND(item.Price ?? 0)</span>
                                    </td>
                                    <td>
                                        @if (item.Discount > 0)
                                        {
                                            <span class="badge bg-success">@item.Discount.Value.ToString("F")%</span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="quantity-display" data-product-id="@item.Id">
                                            <span class="quantity-value">@item.Qty</span>
                                            <span class="quantity-status badge @(item.Qty == 0 ? "bg-danger" : item.Qty <= 10 ? "bg-warning" : "bg-success") ms-2">
                                                    @(item.Qty == 0 ? "Out" : item.Qty <= 10 ? "Low" : "OK")
                                                </span>
                                        </div>
                                    </td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.Tags))
                                        {
                                            @foreach (var tag in item.Tags.Split(',').Take(2))
                                            {
                                                <span class="badge bg-light text-dark me-1">@tag.Trim()</span>
                                            }
                                            @if (item.Tags.Split(',').Length > 2)
                                            {
                                                <span class="text-muted">+@(item.Tags.Split(',').Length - 2)</span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="text-muted">-</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-primary" title="Edit">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info" title="Details">
                                                <i class="fas fa-eye"></i>
                                            </a>
                                            <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger" title="Delete">
                                                <i class="fas fa-trash"></i>
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Hidden field for user name -->
<input type="hidden" data-username="@userName" />

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>
    <script src="~/lib/js/product-signalr.js"></script>

    <style>
        /* Real-time styling */
        .connection-status {
            position: fixed;
            bottom: 20px;
            left: 20px;
            padding: 8px 15px;
            border-radius: 25px;
            font-size: 12px;
            font-weight: bold;
            z-index: 9999;
            transition: all 0.3s ease;
        }

        .connection-status.connected {
            background-color: #28a745;
            color: white;
        }

        .connection-status.disconnected {
            background-color: #dc3545;
            color: white;
        }

        .connection-status.connecting {
            background-color: #ffc107;
            color: #212529;
        }

        .realtime-badge {
            display: inline-block;
            padding: 5px 12px;
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            border-radius: 15px;
            font-size: 11px;
            font-weight: bold;
            animation: pulse 2s infinite;
        }

        .stats-badge {
            display: inline-block;
            padding: 5px 12px;
            background-color: #6c757d;
            color: white;
            border-radius: 15px;
            font-size: 11px;
            font-weight: bold;
        }

        .stat-card {
            background: linear-gradient(135deg, var(--bs-primary));
            color: white;
            padding: 1.5rem;
            border-radius: 10px;
            display: flex;
            align-items: center;
            margin-bottom: 1rem;
            transition: transform 0.2s ease;
        }

        .stat-card:hover {
            transform: translateY(-2px);
        }

        .stat-card.bg-primary { background: linear-gradient(135deg, #007bff, #0056b3); }
        .stat-card.bg-success { background: linear-gradient(135deg, #28a745, #1e7e34); }
        .stat-card.bg-warning { background: linear-gradient(135deg, #ffc107, #d39e00); color: #212529; }
        .stat-card.bg-danger { background: linear-gradient(135deg, #dc3545, #bd2130); }

        .stat-icon {
            font-size: 2rem;
            margin-right: 1rem;
            opacity: 0.8;
        }

        .stat-content h3 {
            margin: 0;
            font-size: 1.8rem;
            font-weight: bold;
        }

        .stat-content p {
            margin: 0;
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .product-thumbnail {
            width: 50px;
            height: 50px;
            object-fit: cover;
            border-radius: 5px;
        }

        .no-image {
            width: 50px;
            height: 50px;
            background-color: #f8f9fa;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 5px;
            color: #6c757d;
        }

        .product-title strong {
            display: block;
            font-weight: 600;
        }

        .quantity-display {
            display: flex;
            align-items: center;
        }

        .quantity-value {
            font-weight: bold;
            font-size: 1.1rem;
        }

        .price {
            font-weight: bold;
            color: #007bff;
        }

        /* Animation for updated rows */
        .row-updated {
            background-color: #e7f3ff !important;
            animation: rowPulse 2s ease-out;
        }

        .row-new {
            background-color: #d4edda !important;
            animation: slideInFromTop 0.5s ease-out;
        }

        .row-deleted {
            background-color: #f8d7da !important;
            animation: slideOutToRight 0.5s ease-out forwards;
        }



        .notification-container {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 9999;
            max-width: 350px;
        }

        .notification-item {
            margin-bottom: 10px;
            animation: slideInRight 0.3s ease;
        }

    </style>

    <script>
        function addProductRow(product) {
            const imageHtml = product.ImageName ?
                `<img src="/images/banners/${product.ImageName}" alt="${product.Title}" class="product-thumbnail" />` :
                `<div class="no-image"><i class="fas fa-image"></i></div>`;

            const discountHtml = product.Discount > 0 ?
                `<span class="badge bg-success">${product.Discount}%</span>` :
                `<span class="text-muted">-</span>`;

            const qtyStatus = product.Qty == 0 ? 'bg-danger' : product.Qty <= 10 ? 'bg-warning' : 'bg-success';
            const qtyStatusText = product.Qty == 0 ? 'Out' : product.Qty <= 10 ? 'Low' : 'OK';

            const newRow = `
                    <tr data-product-id="${product.Id}" class="product-row row-new">
                        <td>
                            <div class="product-image">${imageHtml}</div>
                        </td>
                        <td>
                            <div class="product-title">
                                <strong>${product.Title}</strong>
                                ${product.Description ? `<small class="text-muted d-block">${product.Description}</small>` : ''}
                            </div>
                        </td>
                        <td><span class="price">₫${product.Price.toLocaleString()}</span></td>
                        <td>${discountHtml}</td>
                        <td>
                            <div class="quantity-display" data-product-id="${product.Id}">
                                <span class="quantity-value">${product.Qty}</span>
                                <span class="quantity-status badge ${qtyStatus} ms-2">${qtyStatusText}</span>
                            </div>
                        </td>
                        <td>
                            ${product.Tags ? product.Tags.split(',').slice(0, 2).map(tag => `<span class="badge bg-light text-dark me-1">${tag.trim()}</span>`).join('') : '<span class="text-muted">-</span>'}
                        </td>
                        <td>
                            <div class="btn-group" role="group">
                                <a href="/Admin/Products/Edit/${product.Id}" class="btn btn-sm btn-outline-primary" title="Edit">
                                    <i class="fas fa-edit"></i>
                                </a>
                                <a href="/Admin/Products/Details/${product.Id}" class="btn btn-sm btn-outline-info" title="Details">
                                    <i class="fas fa-eye"></i>
                                </a>
                                <a href="/Admin/Products/Delete/${product.Id}" class="btn btn-sm btn-outline-danger" title="Delete">
                                    <i class="fas fa-trash"></i>
                                </a>
                            </div>
                        </td>
                    </tr>
                `;

            $('#productsTableBody').prepend(newRow);

            // Remove animation class after animation completes
            setTimeout(() => {
                $(`.product-row[data-product-id="${product.Id}"]`).removeClass('row-new');
            }, 500);
        }


        function updateStats() {
            // Recalculate stats from current table data
            const rows = $('.product-row');
            const totalProducts = rows.length;
            let inStock = 0, lowStock = 0, outOfStock = 0;

            rows.each(function() {
                const qty = parseInt($(this).find('.quantity-value').text()) || 0;
                if (qty === 0) {
                    outOfStock++;
                } else if (qty <= 10) {
                    lowStock++;
                    inStock++;
                } else {
                    inStock++;
                }
            });

            $('#totalProducts').text(totalProducts);
            $('#inStockProducts').text(inStock);
            $('#lowStockProducts').text(lowStock);
            $('#outOfStockProducts').text(outOfStock);
        }
        $(function() {
            // Khi tạo mới
            window.productSignalR.connection.on("ProductCreated", data => {
                console.log('New product payload:', data);
                addProductRow(data);
                updateStats();
            });

            // Tương tự cho update/delete nếu cần
            window.productSignalR.connection.on("ProductUpdated", data => { /* ... */ });
            window.productSignalR.connection.on("ProductDeleted", data => {
                removeProductRow(data.id);
                updateStats();
            });

            // Nút Refresh chỉ invoke SignalR
            $('#refreshBtn').click(() => {
                if (window.productSignalR.isConnected) {
                    window.productSignalR.connection.invoke("RefreshStatistics")
                        .catch(err => console.error(err));
                }
            });
        });
        $(document).ready(function() {
            $(document).ready(function() {
                // Log tất cả elements có id chứa statistics
                console.log('Total Products Element:', document.getElementById('totalProducts'));
                console.log('Active Users Element:', document.getElementById('activeUsers'));

                // Kiểm tra khi SignalR kết nối
                if (window.productSignalR) {
                    window.productSignalR.connection.on("StatisticsUpdated", function(data) {
                        console.log('Raw statistics data received:', data);
                        console.log('TotalProducts value:', data.TotalProducts);
                        console.log('ActiveUsers value:', data.ActiveUsers);
                    });

                    // Test manual refresh statistics
                    setTimeout(() => {
                        if (window.productSignalR.isConnected) {
                            console.log('Manually calling RefreshStatistics...');
                            window.productSignalR.connection.invoke("RefreshStatistics")
                                .catch(err => console.error('Error calling RefreshStatistics:', err));
                        }
                    }, 3000); // 3 seconds after page load
                }

                // Manual check elements every 2 seconds
                setInterval(() => {
                    const totalEl = document.getElementById('totalProducts');
                    const usersEl = document.getElementById('activeUsers');
                    console.log('Current values - Total:', totalEl?.textContent, 'Users:', usersEl?.textContent);
                }, 5000);
            });
            // Initialize real-time functionality
            if (window.productSignalR) {
                // Handle product created
                window.productSignalR.connection.on("ProductCreated", function(data) {
                    addProductRow(data);
                    updateStats();
                });

                // Handle product updated
                window.productSignalR.connection.on("ProductUpdated", function(data) {
                    updateProductRow(data);
                    updateStats();
                });

                // Handle product deleted
                window.productSignalR.connection.on("ProductDeleted", function(data) {
                    removeProductRow(data.Id);
                    updateStats();
                });

                // Handle quantity updated
                window.productSignalR.connection.on("QuantityUpdated", function(data) {
                    updateProductQuantity(data.ProductId, data.NewQuantity);
                    updateStats();
                });

                // Handle user connections
                window.productSignalR.connection.on("UserConnected", function(data) {
                    $('#activeUsers').text(data.TotalUsers);
                });

                window.productSignalR.connection.on("UserDisconnected", function(data) {
                    $('#activeUsers').text(data.TotalUsers);
                });
            }

            // Refresh button
            $('#refreshBtn').click(function() {
                location.reload();
            });

            // Filter functionality
            $('.dropdown-item[data-filter]').click(function(e) {
                e.preventDefault();
                const filter = $(this).data('filter');
                filterProducts(filter);
            });

            

            function updateProductRow(product) {
                const row = $(`.product-row[data-product-id="${product.Id}"]`);
                if (row.length) {
                    row.addClass('row-updated');

                    // Update product data
                    row.find('.product-title strong').text(product.Title);
                    row.find('.price').text('₫' + product.Price.toLocaleString());

                    if (product.ImageName) {
                        row.find('.product-image').html(`<img src="/images/banners/${product.ImageName}" alt="${product.Title}" class="product-thumbnail" />`);
                    }

                    setTimeout(() => {
                        row.removeClass('row-updated');
                    }, 2000);
                }
            }

            function removeProductRow(productId) {
                const row = $(`.product-row[data-product-id="${productId}"]`);
                if (row.length) {
                    row.addClass('row-deleted');
                    setTimeout(() => {
                        row.remove();
                    }, 500);
                }
            }

            function updateProductQuantity(productId, newQuantity) {
                const quantityDisplay = $(`.quantity-display[data-product-id="${productId}"]`);
                if (quantityDisplay.length) {
                    quantityDisplay.find('.quantity-value').text(newQuantity);

                    const statusBadge = quantityDisplay.find('.quantity-status');
                    statusBadge.removeClass('bg-danger bg-warning bg-success');

                    if (newQuantity == 0) {
                        statusBadge.addClass('bg-danger').text('Out');
                    } else if (newQuantity <= 10) {
                        statusBadge.addClass('bg-warning').text('Low');
                    } else {
                        statusBadge.addClass('bg-success').text('OK');
                    }

                    // Highlight the row
                    quantityDisplay.closest('tr').addClass('row-updated');
                    setTimeout(() => {
                        quantityDisplay.closest('tr').removeClass('row-updated');
                    }, 2000);
                }
            }

            function filterProducts(filter) {
                $('.product-row').show();

                switch (filter) {
                    case 'in-stock':
                        $('.product-row').each(function() {
                            const qty = parseInt($(this).find('.quantity-value').text()) || 0;
                            if (qty === 0) $(this).hide();
                        });
                        break;
                    case 'low-stock':
                        $('.product-row').each(function() {
                            const qty = parseInt($(this).find('.quantity-value').text()) || 0;
                            if (qty === 0 || qty > 10) $(this).hide();
                        });
                        break;
                    case 'out-of-stock':
                        $('.product-row').each(function() {
                            const qty = parseInt($(this).find('.quantity-value').text()) || 0;
                            if (qty > 0) $(this).hide();
                        });
                        break;
                }
            }
        });
    
    </script>
}